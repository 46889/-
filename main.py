import requests
import textwrap
import re
import logging
import json
import base64
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY = "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"
API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL = "mistralai/mistral-7b-instruct"
TOKEN = "7951956501:AAH0D0oMdiMXUnhCtvWavrrOCU2zqWUA69I"
ADMIN_ID = 1478525032  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MAIN_MENU, AWAITING_TOPIC, PLAN_CREATED, POST_STUDY_CHOICE, TEST_IN_PROGRESS, POST_TEST_CHOICE, HISTORY_VIEW = range(7)

class Database:
    def __init__(self, state_data=None):
        if state_data:
            self.data = json.loads(base64.b64decode(state_data).decode('utf-8'))
            logger.info("Database restored from backup")
        else:
            self.data = {"users": {}, "stats": {"total_users": 0, "total_searches": 0}}
            logger.info("New database created")
    
    def export_state(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ base64 —Å—Ç—Ä–æ–∫—É"""
        return base64.b64encode(json.dumps(self.data).encode('utf-8')).decode('utf-8')
    
    def add_user(self, user_id, username=None):
        user_id = str(user_id)
        if user_id not in self.data["users"]:
            self.data["users"][user_id] = {
                "username": username,
                "join_date": datetime.now().isoformat(),
                "searches": [],
                "history": [],
                "total_score": 0,
                "tests_taken": 0
            }
            self.data["stats"]["total_users"] += 1
            logger.info(f"New user added: {user_id}")
    
    def add_search(self, user_id, topic):
        user_id = str(user_id)
        if user_id in self.data["users"]:
            self.data["users"][user_id]["searches"].append({
                "topic": topic,
                "date": datetime.now().isoformat()
            })
            self.data["stats"]["total_searches"] += 1
            logger.info(f"Search added for {user_id}: {topic}")
    
    def add_to_history(self, user_id, topic, plan, score=None):
        user_id = str(user_id)
        if user_id in self.data["users"]:
            history_item = {
                "topic": topic,
                "plan": plan,
                "date": datetime.now().isoformat(),
                "score": score
            }
            self.data["users"][user_id]["history"].append(history_item)
            if score is not None:
                self.data["users"][user_id]["total_score"] += score
                self.data["users"][user_id]["tests_taken"] += 1
            logger.info(f"History added for {user_id}: {topic} ({score}%)")
    
    def get_user_history(self, user_id):
        user_id = str(user_id)
        return self.data["users"].get(user_id, {}).get("history", [])
    
    def get_all_users(self):
        return self.data["users"]
    
    def get_stats(self):
        return self.data["stats"]
    
    def clear_database(self):
        """–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.data = {"users": {}, "stats": {"total_users": 0, "total_searches": 0}}
        logger.info("Database cleared")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

class StudyState:
    def __init__(self):
        self.reset()
        
    def reset(self):
        self.current_state = MAIN_MENU
        self.study_plan = []
        self.current_step = 0
        self.current_topic = ""
        self.test_questions = []
        self.current_question_index = 0
        self.test_score = 0
        self.user_answers = []
        self.from_history = False

def get_time():
    return datetime.now().strftime("%H:%M")

def clean_math_symbols(text):
    """–£–ø—Ä–æ—â–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = re.sub(r'\\frac\{([^{}]+)\}\{([^{}]+)\}', r'\1/\2', text)
    text = re.sub(r'\\[a-zA-Z]+\{?', '', text)
    text = re.sub(r'\{|\}', '', text)
    return text.strip()

def format_response(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    cleaned = clean_math_symbols(text)
    cleaned = re.sub(r'\*\*|__', '', cleaned)
    wrapped = textwrap.fill(cleaned, width=100)
    return f"{get_time()} AI: {wrapped}"

def generate_plan(topic):
    fallback_plan = [
        {"title": f"–í–≤–µ–¥–µ–Ω–∏–µ –≤ {topic}"},
        {"title": "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"},
        {"title": "–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è"},
        {"title": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"},
        {"title": "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"}
    ]
    
    try:
        messages = [{
            "role": "system",
            "content": "–¢—ã —É—á–∏—Ç–µ–ª—å. –°–æ–∑–¥–∞–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –∏–∑ 5 —à–∞–≥–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ. "
                       "–ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–æ –æ–∑–∞–≥–ª–∞–≤–ª–µ–Ω. –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —à–∞–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "
                       "1. [–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞ 1]\n2. [–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞ 2]\n...\n5. [–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞ 5]"
        }, {
            "role": "user",
            "content": f"–°–æ–∑–¥–∞–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –∏–∑ 5 —à–∞–≥–æ–≤ –ø–æ —Ç–µ–º–µ: '{topic}'"
        }]
        
        response = send_api_request(messages, max_tokens=300)
        if response.startswith("‚ö†Ô∏è"):
            return fallback_plan
            
        steps = []
        for line in response.split('\n'):
            if line.strip() == '':
                continue
            match = re.match(r'(\d+)\.\s*(.+)', line)
            if match:
                step_title = match.group(2).strip()
                steps.append({"title": clean_math_symbols(step_title)})
        
        return steps[:5] if steps else fallback_plan
    except Exception:
        return fallback_plan

def send_api_request(messages, max_tokens=200):
    try:
        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://localhost",
            "X-Title": "Math Tutor"
        }
        
        payload = {
            "model": MODEL,
            "messages": messages,
            "temperature": 0.3,
            "max_tokens": max_tokens
        }
        
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        return clean_math_symbols(data["choices"][0]["message"]["content"])
    
    except requests.exceptions.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"

def generate_test_questions(topic, count=3):
    try:
        messages = [{
            "role": "system",
            "content": f"–°–æ–∑–¥–∞–π {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–º–µ '{topic}' —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤. "
                       "–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:\n"
                       "–í–û–ü–†–û–° [–Ω–æ–º–µ—Ä]: [—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]\n"
                       "A) [–≤–∞—Ä–∏–∞–Ω—Ç A]\nB) [–≤–∞—Ä–∏–∞–Ω—Ç B]\nC) [–≤–∞—Ä–∏–∞–Ω—Ç C]\nD) [–≤–∞—Ä–∏–∞–Ω—Ç D]\n"
                       "–û–¢–í–ï–¢: [–±—É–∫–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞]\n\n"
                       "–ò–∑–±–µ–≥–∞–π —Ä–∞–∑–º–µ—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        }]
        
        messages.append({
            "role": "user", 
            "content": f"–°–æ–∑–¥–∞–π {count} —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–º–µ '{topic}'"
        })
        
        response = send_api_request(messages, max_tokens=800)
        return parse_test_questions(response) if not response.startswith("‚ö†Ô∏è") else []
    except Exception:
        return []

def parse_test_questions(text):
    questions = []
    pattern = r'–í–û–ü–†–û–°\s*\d+:\s*(.+?)\s*A\)\s*(.+?)\s*B\)\s*(.+?)\s*C\)\s*(.+?)\s*D\)\s*(.+?)\s*–û–¢–í–ï–¢:\s*([A-D])'
    matches = re.findall(pattern, text, re.DOTALL | re.IGNORECASE)
    
    for match in matches:
        questions.append({
            "text": clean_math_symbols(match[0].strip()),
            "options": {
                "A": clean_math_symbols(match[1].strip()),
                "B": clean_math_symbols(match[2].strip()),
                "C": clean_math_symbols(match[3].strip()),
                "D": clean_math_symbols(match[4].strip())
            },
            "correct": match[5].upper().strip()
        })
    
    return questions

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    db.add_user(user.id, user.username)
    
    context.user_data['state'] = StudyState()
    context.user_data['messages'] = [{
        "role": "system",
        "content": "–¢—ã —É—á–∏—Ç–µ–ª—å. –û–±—ä—è—Å–Ω—è–π —Ç–µ–º—ã –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                   "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã. –ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏."
    }]
    
    keyboard = [
        [InlineKeyboardButton("üìö –ù–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ", callback_data="new_learning")],
        [InlineKeyboardButton("üìñ –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="my_history")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    state = context.user_data['state']
    
    if query.data == "new_learning":
        state.from_history = False
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å:")
        return AWAITING_TOPIC
    
    elif query.data == "my_history":
        return await show_history(query, context)
    
    elif query.data == "about":
        about_text = (
            "ü§ñ –£—á–µ–±–Ω—ã–π –±–æ—Ç v3.0\n\n"
            "üìö –°–æ–∑–¥–∞—é –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è\n"
            "üß™ –ü—Ä–æ–≤–æ–∂—É —Ç–µ—Å—Ç—ã\n"
            "üìä –°–æ—Ö—Ä–∞–Ω—è—é –∏—Å—Ç–æ—Ä–∏—é\n"
            "üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ '–ù–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ' –¥–ª—è –Ω–∞—á–∞–ª–∞!"
        )
        
        keyboard = [[InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        await query.edit_message_text(about_text, reply_markup=InlineKeyboardMarkup(keyboard))
        return MAIN_MENU
    
    elif query.data == "main_menu":
        return await start_from_callback(query, context)

async def start_from_callback(query, context):
    keyboard = [
        [InlineKeyboardButton("üìö –ù–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ", callback_data="new_learning")],
        [InlineKeyboardButton("üìñ –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="my_history")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MAIN_MENU

async def show_history(query, context):
    user_id = query.from_user.id
    history = db.get_user_history(user_id)
    
    if not history:
        await query.edit_message_text("üìñ –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è –ø—É—Å—Ç–∞\n\n–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ!")
        keyboard = [[InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        await context.bot.send_message(
            chat_id=user_id, 
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return MAIN_MENU
    
    text = "üìñ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è:\n\n"
    keyboard = []
    
    recent_history = history[-10:]
    for i, item in enumerate(recent_history):
        date = datetime.fromisoformat(item["date"]).strftime("%d.%m")
        score_text = f" ({item['score']}%)" if item.get('score') else ""
        text += f"{i+1}. {item['topic']} - {date}{score_text}\n"
        keyboard.append([InlineKeyboardButton(
            f"{i+1}. {item['topic'][:25]}...", 
            callback_data=f"history_{len(history)-10+i}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return HISTORY_VIEW

async def handle_history_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "main_menu":
        return await start_from_callback(query, context)
    
    if query.data.startswith("history_"):
        index = int(query.data.split("_")[1])
        user_id = query.from_user.id
        history = db.get_user_history(user_id)
        
        if 0 <= index < len(history):
            item = history[index]
            state = context.user_data['state']
            state.current_topic = item["topic"]
            state.study_plan = item["plan"]
            state.from_history = True
            
            await query.edit_message_text(f"üìö –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–º–µ: {item['topic']}\n\n–ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω!")
            
            keyboard = [
                [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ ‚Üí", callback_data="start_learning")],
                [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏", callback_data="back_to_history")]
            ]
            await context.bot.send_message(
                chat_id=user_id, 
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return PLAN_CREATED
    
    return HISTORY_VIEW

async def handle_topic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    state = context.user_data['state']
    user_input = update.message.text.strip()
    user_id = update.effective_user.id
    
    if not user_input:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
        return AWAITING_TOPIC
    
    state.current_topic = user_input
    db.add_search(user_id, user_input)
    
    await update.message.reply_text(f"üåÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω –ø–æ —Ç–µ–º–µ '{user_input}'...")
    state.study_plan = generate_plan(user_input)
    
    plan_text = f"üìö –ü–ª–∞–Ω: '{user_input}'\n\n" + "\n".join(
        [f"{i+1}. {item['title']}" for i, item in enumerate(state.study_plan)]
    )
    
    keyboard = []
    for i in range(len(state.study_plan)):
        if i % 3 == 0:
            keyboard.append([])
        keyboard[-1].append(InlineKeyboardButton(f"{i+1}", callback_data=f"step_{i}"))
    
    keyboard.append([InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ ‚Üí", callback_data="start_learning")])
    keyboard.append([InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    await update.message.reply_text(
        plan_text, 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PLAN_CREATED

async def handle_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    state = context.user_data['state']
    messages = context.user_data['messages']
    
    if query.data == "main_menu":
        return await start_from_callback(query, context)
    elif query.data == "back_to_history":
        return await show_history(query, context)
    elif query.data == "start_learning":
        state.current_step = 0
    elif query.data == "next":
        state.current_step += 1
        if state.current_step >= len(state.study_plan):
            return await handle_end_plan(query, context)
    elif query.data == "finish_plan":
        return await handle_end_plan(query, context)
    elif query.data.startswith("step_"):
        state.current_step = int(query.data.split("_")[1])
    
    current_item = state.study_plan[state.current_step]
    await query.edit_message_text(f"üîç –ü—É–Ω–∫—Ç {state.current_step+1}: {current_item['title']}")
    
    try:
        prompt = (
            f"–û–±—ä—è—Å–Ω–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ —Ç–µ–º—É: '{current_item['title']}' "
            f"–ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{state.current_topic}'. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã."
        )
        
        messages.append({"role": "user", "content": prompt})
        content = send_api_request(messages, max_tokens=300)
        messages.append({"role": "assistant", "content": content})
        
        await context.bot.send_message(
            chat_id=query.from_user.id, 
            text=format_response(content)
        )
    except Exception as e:
        logger.error(f"Error in explanation: {str(e)}")
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥."
        )
    
    keyboard = []
    if state.current_step < len(state.study_plan) - 1:
        keyboard.append([InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π ‚Üí", callback_data="next")])
    else:
        keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_plan")])
    
    keyboard.append([InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    await context.bot.send_message(
        chat_id=query.from_user.id, 
        text="üìù –ù–∞–≤–∏–≥–∞—Ü–∏—è:", 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PLAN_CREATED

async def handle_end_plan(update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(update, Update):
        user_id = update.message.from_user.id
    else:
        user_id = update.from_user.id
        await update.answer()
    
    state = context.user_data['state']
    
    keyboard = [
        [InlineKeyboardButton("üß™ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="take_test")],
        [InlineKeyboardButton("üìö –ù–æ–≤–∞—è —Ç–µ–º–∞", callback_data="new_learning")],
        [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await context.bot.send_message(
        chat_id=user_id, 
        text="üéâ –ü–ª–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç?", 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return POST_STUDY_CHOICE

async def handle_test_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    state = context.user_data['state']
    
    if query.data == "main_menu":
        return await start_from_callback(query, context)
    elif query.data == "new_learning":
        state.reset()
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:")
        return AWAITING_TOPIC
    elif query.data == "take_test":
        await query.edit_message_text("üåÄ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç...")
        state.test_questions = generate_test_questions(state.current_topic)
        
        if state.test_questions:
            state.current_question_index = 0
            state.test_score = 0
            state.user_answers = []
            await show_question(context, state, query.from_user.id)
            return TEST_IN_PROGRESS
        else:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç")
            return await handle_end_plan(query, context)

async def show_question(context, state, user_id):
    if state.current_question_index >= len(state.test_questions):
        return await finish_test(context, state, user_id)
    
    question = state.test_questions[state.current_question_index]
    question_text = f"üìù –í–æ–ø—Ä–æ—Å {state.current_question_index+1}/{len(state.test_questions)}:\n\n{question['text']}"
    
    keyboard = []
    for option in ['A', 'B', 'C', 'D']:
        keyboard.append([InlineKeyboardButton(
            f"{option}) {question['options'][option]}", 
            callback_data=f"answer_{option}"
        )])
    
    await context.bot.send_message(
        chat_id=user_id, 
        text=question_text, 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    state = context.user_data['state']
    
    user_answer = query.data.split("_")[1]
    current_question = state.test_questions[state.current_question_index]
    
    state.user_answers.append({
        "question": current_question["text"],
        "user_answer": user_answer,
        "correct_answer": current_question["correct"]
    })
    
    if user_answer == current_question["correct"]:
        response_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        state.test_score += 1
    else:
        response_text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question['correct']}"
    
    await query.edit_message_text(response_text)
    state.current_question_index += 1
    
    if state.current_question_index < len(state.test_questions):
        await show_question(context, state, query.from_user.id)
        return TEST_IN_PROGRESS
    else:
        return await finish_test(context, state, query.from_user.id)

async def finish_test(context, state, user_id):
    score_percent = int((state.test_score / len(state.test_questions)) * 100) if state.test_questions else 0
    
    result_text = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {state.test_score}/{len(state.test_questions)} ({score_percent}%)"
    if state.test_score == len(state.test_questions):
        result_text += "\nüéâ –û—Ç–ª–∏—á–Ω–æ!"
    elif score_percent >= 50:
        result_text += "\nüëç –•–æ—Ä–æ—à–æ!"
    else:
        result_text += "\nüìñ –°—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"
    
    if not state.from_history:
        db.add_to_history(user_id, state.current_topic, state.study_plan, score_percent)
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç", callback_data="retry_test")],
        [InlineKeyboardButton("üìö –ù–æ–≤–∞—è —Ç–µ–º–∞", callback_data="new_learning")],
        [InlineKeyboardButton("‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await context.bot.send_message(
        chat_id=user_id, 
        text=result_text, 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return POST_TEST_CHOICE

async def handle_post_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    state = context.user_data['state']
    
    if query.data == "main_menu":
        return await start_from_callback(query, context)
    elif query.data == "new_learning":
        state.reset()
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:")
        return AWAITING_TOPIC
    elif query.data == "retry_test":
        state.current_question_index = 0
        state.test_score = 0
        state.user_answers = []
        await show_question(context, state, query.from_user.id)
        return TEST_IN_PROGRESS

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    stats = db.get_stats()
    all_users = db.get_all_users()
    
    text = "üë®‚Äçüíº –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨\n\n"
    text += f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
    text += f"üîç –ü–æ–∏—Å–∫–æ–≤: {stats['total_searches']}\n\n"
    
    text += "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for user_id, data in all_users.items():
        username = data.get('username', '–ë–µ–∑ –Ω–∏–∫–∞')
        username_display = f"@{username}" if username and username != '–ë–µ–∑ –Ω–∏–∫–∞' else f"ID: {user_id}"
        tests_count = data.get('tests_taken', 0)
        searches_count = len(data.get('searches', []))
        join_date = datetime.fromisoformat(data['join_date']).strftime("%d.%m.%Y")
        
        avg_score = data.get('total_score', 0) / tests_count if tests_count > 0 else 0
        
        text += f"‚Ä¢ {username_display}\n"
        text += f"  üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {join_date}\n"
        text += f"  üîç –ü–æ–∏—Å–∫–æ–≤: {searches_count}, üß™ –¢–µ—Å—Ç–æ–≤: {tests_count}\n"
        if tests_count > 0:
            text += f"  üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}%\n"
        text += "\n"
    
    if not all_users:
        text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
    
    text += "üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏:\n"
    recent_searches = []
    for user_id, data in all_users.items():
        username = data.get('username', '–ë–µ–∑ –Ω–∏–∫–∞')
        username_display = f"@{username}" if username and username != '–ë–µ–∑ –Ω–∏–∫–∞' else f"ID: {user_id}"
        for search in data.get('searches', [])[-3:]:
            recent_searches.append((username_display, search['topic'], search['date']))
    
    recent_searches.sort(key=lambda x: x[2], reverse=True)
    
    for username_display, topic, date in recent_searches[:10]:
        date_str = datetime.fromisoformat(date).strftime("%d.%m %H:%M")
        text += f"‚Ä¢ {username_display}: {topic[:25]}... ({date_str})\n"
    
    if not recent_searches:
        text += "–ü–æ–∏—Å–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n"
    
    await update.message.reply_text(text)

async def admin_backup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        state_data = db.export_state()
        await update.message.reply_text(
            f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (base64):\n\n"
            f"<code>{state_data}</code>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /restore –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
            parse_mode="HTML"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")

async def admin_restore(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /restore <base64_data>")
        return
    
    try:
        global db
        state_data = ' '.join(context.args)
        db = Database(state_data)
        await update.message.reply_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!")
        logger.info(f"Database restored. Users: {db.get_stats()['total_users']}")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
        logger.error(f"Restore error: {str(e)}")

async def admin_clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    db.clear_database()
    await update.message.reply_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")
    logger.info("Database cleared by admin")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END

def main() -> None:
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [CallbackQueryHandler(handle_main_menu)],
            AWAITING_TOPIC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_topic),
                CallbackQueryHandler(handle_main_menu)
            ],
            PLAN_CREATED: [CallbackQueryHandler(handle_plan)],
            POST_STUDY_CHOICE: [CallbackQueryHandler(handle_test_choice)],
            TEST_IN_PROGRESS: [CallbackQueryHandler(handle_test_answer)],
            POST_TEST_CHOICE: [CallbackQueryHandler(handle_post_test)],
            HISTORY_VIEW: [CallbackQueryHandler(handle_history_selection)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('admin', admin_panel))
    application.add_handler(CommandHandler('backup', admin_backup))
    application.add_handler(CommandHandler('restore', admin_restore))
    application.add_handler(CommandHandler('clear_db', admin_clear))
    application.add_handler(CommandHandler('start', start))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db.get_stats()['total_users']}, –ü–æ–∏—Å–∫–æ–≤: {db.get_stats()['total_searches']}")
    
    application.run_polling()

if __name__ == "__main__":
    main()

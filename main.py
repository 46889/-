import sqlite3
import telebot
import random
import time
import logging
import pandas as pd
import os
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

####################################################################
# ======================= –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ========================= #
####################################################################

BOT_TOKEN = "7472230346:AAHydnjEp9UZviWGr7drZEVKxCXYFngvtCc"
CHANNEL_USERNAME = "@ldlfflgm"
CHANNEL_LINK = "https://t.me/ldlfflgm"
BONUS_AMOUNT = 100
# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = [7338817463, 8190084234]  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω –∏ –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω
WB_LINK = "https://www.wildberries.ru/seller/–í–ê–®_–ú–ê–ì–ê–ó–ò–ù"
OZON_LINK = "https://www.ozon.ru/seller/–í–ê–®_–ú–ê–ì–ê–ó–ò–ù"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
DEFAULT_PHOTOS = {
    "start": "1.jpg",
    "profile": "2.jpg", 
    "socials": "3.jpg",
    "support": "4.jpg",
    "admin": "5.jpg",
    "iphone": "6.jpg"
}

# –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–ø–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
COPYABLE_TEXT = "`{text}`"  # Markdown —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

START_MESSAGE = "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
SUPPORT_MESSAGE = "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:"
SOCIALS_MESSAGE = "üì± –ù–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:"
EARN_TOKENS_MESSAGE = "üü° –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:"
PROFILE_MESSAGE = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\nüÜî ID: {user_id}\nüë§ Username: {username}\nüü° –¢–æ–∫–µ–Ω—ã: {tokens}\nüéÅ –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É: {bonus_status}\n{admin_status}"
GIVEAWAYS_MESSAGE = "üéÅ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:\n\n"
GIVEAWAY_DETAILS_MESSAGE = "{name}\n\n{description}\n\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: {price}üü°"
SUCCESS_PARTICIPATION = "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\nüí∏ –° –≤–∞—Å —Å–ø–∏—Å–∞–Ω–æ: {price}üü°\nüü° –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}"
SUCCESS_BONUS = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus}üü°\n\n‚úÖ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!"
NOT_SUBSCRIBED_MESSAGE = "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: {CHANNEL_LINK}"
ADMIN_CANNOT_PARTICIPATE = "‚õî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö!"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
SUPPORT_CATEGORIES = {
    "–ö–∞–º–µ—Ä—ã": "https://t.me/–≤–∞—à_—á–∞—Ç_–∫–∞–º–µ—Ä—ã",
    "–°—Ç–µ–∫–ª–∞": "https://t.me/–≤–∞—à_—á–∞—Ç_—Å—Ç–µ–∫–ª–∞",
    "–î–µ—Ä–∂–∞—Ç–µ–ª–∏": "https://t.me/–≤–∞—à_—á–∞—Ç_–¥–µ—Ä–∂–∞—Ç–µ–ª–∏",
    "–ù–∞—É—à–Ω–∏–∫–∏": "https://t.me/–≤–∞—à_—á–∞—Ç_–Ω–∞—É—à–Ω–∏–∫–∏"
}

SOCIAL_MEDIA = {
    "Instagram": "https://instagram.com/–≤–∞—à_–ø—Ä–æ—Ñ–∏–ª—å",
    "Telegram": "https://t.me/–≤–∞—à_–∫–∞–Ω–∞–ª",
    "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ": "https://vk.com/–≤–∞—à–∞_–≥—Ä—É–ø–ø–∞"
}

GIVEAWAYS = [
    {
        "name": "üéÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∏ —É—Å–ª–æ–≤–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞...",
        "price": 15
    },
]

# –†–æ–∑—ã–≥—Ä—ã—à iPhone –∑–∞ –æ—Ç–∑—ã–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º COPYABLE_TEXT)
IPHONE_GIVEAWAY_INSTRUCTION = """üì± –†–æ–∑—ã–≥—Ä—ã—à iPhone –∑–∞ –æ—Ç–∑—ã–≤!
 1. –í—ã –∫—É–ø–∏–ª–∏ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä TOFURA –∏–ª–∏ FaizFull –Ω–∞ Wb –∏–ª–∏ OZON 
 2. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —Å ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–∞—à —Ç–µ–∫—Å—Ç —Å –æ—Ç–∑—ã–≤–æ–º (—Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã), –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ–¥—É–∫—Ç–µ 
 3. –£—Ä–∞ –≤—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à telegram, –∏ –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ 
 4. –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç 30.12.25 –≤ 20:00 –º—Å–∫ 
 5. –ó–∞—è–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–æ 29.12.25 00:00
‚úÖ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —É—á–∞—Å—Ç–∏—è: {unique_id}

üìù –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–∂–º–∏üëá:
{copy_text}

‚ö†Ô∏è –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à ID, –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è!
"""

####################################################################
# ======================= –û–°–ù–û–í–ù–û–ô –ö–û–î =========================== #
####################################################################

bot = telebot.TeleBot(BOT_TOKEN)
conn = sqlite3.connect('profiles.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
admin_states = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        tokens INTEGER DEFAULT 100,
        bonus_received BOOLEAN DEFAULT 0,
        created_at TEXT,
        last_seen TEXT
    )
    ''')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    cursor.execute("PRAGMA table_info(users)")
    columns = [col[1] for col in cursor.fetchall()]
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if 'username' not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN username TEXT")
    
    if 'tokens' not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN tokens INTEGER DEFAULT 100")
        cursor.execute("UPDATE users SET tokens = 100 WHERE tokens IS NULL")
    
    if 'bonus_received' not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN bonus_received BOOLEAN DEFAULT 0")
        cursor.execute("UPDATE users SET bonus_received = 0 WHERE bonus_received IS NULL")
    
    if 'created_at' not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN created_at TEXT")
        cursor.execute("UPDATE users SET created_at = ?", (now,))
    
    if 'last_seen' not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN last_seen TEXT")
        cursor.execute("UPDATE users SET last_seen = ?", (now,))
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS giveaways (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT NOT NULL,
        price INTEGER NOT NULL
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS giveaway_participants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        giveaway_id INTEGER,
        participation_date TEXT,
        FOREIGN KEY(user_id) REFERENCES users(user_id),
        FOREIGN KEY(giveaway_id) REFERENCES giveaways(id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ iPhone
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS iphone_participants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        unique_id TEXT UNIQUE,
        participation_date TEXT,
        FOREIGN KEY(user_id) REFERENCES users(user_id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS bot_settings (
        id INTEGER PRIMARY KEY,
        setting_name TEXT UNIQUE,
        setting_value TEXT
    )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü giveaway_id –≤ —Ç–∞–±–ª–∏—Ü—É iphone_participants –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute("PRAGMA table_info(iphone_participants)")
    iphone_columns = [col[1] for col in cursor.fetchall()]
    
    if 'giveaway_id' not in iphone_columns:
        cursor.execute("ALTER TABLE iphone_participants ADD COLUMN giveaway_id INTEGER DEFAULT 1")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_settings = {
        'start_message': START_MESSAGE,
        'support_message': SUPPORT_MESSAGE,
        'socials_message': SOCIALS_MESSAGE,
        'earn_tokens_message': EARN_TOKENS_MESSAGE,
        'profile_message': PROFILE_MESSAGE,
        'giveaways_message': GIVEAWAYS_MESSAGE,
        'iphone_instruction': IPHONE_GIVEAWAY_INSTRUCTION,
        'photo_start': DEFAULT_PHOTOS["start"],
        'photo_profile': DEFAULT_PHOTOS["profile"],
        'photo_socials': DEFAULT_PHOTOS["socials"],
        'photo_support': DEFAULT_PHOTOS["support"],
        'photo_admin': DEFAULT_PHOTOS["admin"],
        'photo_iphone': DEFAULT_PHOTOS["iphone"],
        'copyable_text': COPYABLE_TEXT  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    
    for setting_name, setting_value in default_settings.items():
        cursor.execute("INSERT OR IGNORE INTO bot_settings (setting_name, setting_value) VALUES (?, ?)", 
                      (setting_name, setting_value))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
    cursor.execute("SELECT COUNT(*) FROM giveaways")
    if cursor.fetchone()[0] == 0:
        for giveaway in GIVEAWAYS:
            cursor.execute(
                "INSERT INTO giveaways (name, description, price) VALUES (?, ?, ?)",
                (giveaway["name"], giveaway["description"], giveaway["price"])
            )
    conn.commit()

init_db()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
def get_setting(setting_name, default_value=""):
    try:
        cursor.execute("SELECT setting_value FROM bot_settings WHERE setting_name = ?", (setting_name,))
        result = cursor.fetchone()
        return result[0] if result else default_value
    except:
        return default_value

def update_setting(setting_name, setting_value):
    try:
        cursor.execute("INSERT OR REPLACE INTO bot_settings (setting_name, setting_value) VALUES (?, ?)", 
                      (setting_name, setting_value))
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {setting_name}: {str(e)}")
        return False

def send_photo_message(chat_id, photo_key, caption, reply_markup=None, parse_mode=None):
    try:
        photo_path = get_setting(f'photo_{photo_key}', DEFAULT_PHOTOS.get(photo_key, "1.jpg"))
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        try:
            with open(photo_path, 'rb') as photo:
                return bot.send_photo(chat_id, photo, caption=caption, reply_markup=reply_markup, parse_mode=parse_mode)
        except FileNotFoundError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return bot.send_message(chat_id, f"üì∏ {caption}", reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {photo_key}: {str(e)}")
        return bot.send_message(chat_id, caption, reply_markup=reply_markup, parse_mode=parse_mode)

def edit_photo_message(chat_id, message_id, photo_key, caption, reply_markup=None, parse_mode=None):
    try:
        photo_path = get_setting(f'photo_{photo_key}', DEFAULT_PHOTOS.get(photo_key, "1.jpg"))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
        try:
            bot.delete_message(chat_id, message_id)
        except:
            pass
        
        return send_photo_message(chat_id, photo_key, caption, reply_markup, parse_mode)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ {photo_key}: {str(e)}")
        return safe_edit_message(chat_id, message_id, caption, reply_markup, parse_mode)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def update_user_info(user_id, username):
    try:
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
        if cursor.fetchone():
            # –û–±–Ω–æ–≤–ª—è–µ–º username –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
            cursor.execute("UPDATE users SET username = ?, last_seen = ? WHERE user_id = ?", 
                          (username, now, user_id))
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "INSERT INTO users (user_id, username, tokens, bonus_received, created_at, last_seen) VALUES (?, ?, ?, ?, ?, ?)", 
                (user_id, username, 100, 0, now, now)
            )
        conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: {user_id} ({username})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        conn.rollback()

def is_user_subscribed(user_id):
    try:
        chat_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return chat_member.status not in ['left', 'kicked']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        return False

def is_admin(user_id):
    return user_id in ADMINS

def get_all_users_except_admins():
    cursor.execute("SELECT user_id FROM users WHERE user_id NOT IN ({})".format(','.join('?' * len(ADMINS))), ADMINS)
    return [row[0] for row in cursor.fetchall()]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
def export_users_to_excel():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        cursor.execute('''
            SELECT 
                u.user_id, 
                u.username, 
                u.tokens, 
                CASE WHEN u.bonus_received = 1 THEN '–î–∞' ELSE '–ù–µ—Ç' END as bonus_received,
                u.created_at,
                u.last_seen,
                (SELECT COUNT(*) FROM giveaway_participants gp WHERE gp.user_id = u.user_id) as participation_count
            FROM users u
            ORDER BY u.user_id
        ''')
        users = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–∞—Å—Ç–∏–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
        cursor.execute('''
            SELECT 
                gp.user_id,
                g.name as giveaway_name,
                gp.participation_date
            FROM giveaway_participants gp
            JOIN giveaways g ON gp.giveaway_id = g.id
        ''')
        participations = cursor.fetchall()
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_columns = [
            'ID', 'Username', '–¢–æ–∫–µ–Ω—ã', '–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω', 
            '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç', '–£—á–∞—Å—Ç–∏–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö'
        ]
        df_users = pd.DataFrame(users, columns=user_columns)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É—á–∞—Å—Ç–∏–π
        participation_columns = ['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–†–æ–∑—ã–≥—Ä—ã—à', '–î–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è']
        df_participations = pd.DataFrame(participations, columns=participation_columns)
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Excel –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            df_users.to_excel(writer, sheet_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', index=False)
            df_participations.to_excel(writer, sheet_name='–£—á–∞—Å—Ç–∏—è', index=False)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            for sheet_name in writer.sheets:
                worksheet = writer.sheets[sheet_name]
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = (max_length + 2) * 1.2
                    worksheet.column_dimensions[column_letter].width = adjusted_width
        
        logger.info(f"–§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω: {filename}")
        return filename
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", exc_info=True)
        return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    row1 = [
        InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
        InlineKeyboardButton("üì± –°–æ—Ü—Å–µ—Ç–∏", callback_data="socials")
    ]
    row2 = [
        InlineKeyboardButton("üéÅ –†–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="giveaways"),
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    ]
    row3_new = [
        InlineKeyboardButton("üì± iPhone –∑–∞ –æ—Ç–∑—ã–≤", callback_data="iphone_giveaway")
    ]
    row4 = [
        InlineKeyboardButton("–ú—ã –Ω–∞ WB", url=WB_LINK),
        InlineKeyboardButton("–ú—ã –Ω–∞ Ozon", url=OZON_LINK)
    ]
    keyboard.add(*row1)
    keyboard.add(*row2)
    keyboard.add(*row3_new)
    keyboard.add(*row4)
    return keyboard

def back_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard

def giveaway_keyboard(giveaway_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"participate_{giveaway_id}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="giveaways"))
    return keyboard

def earn_tokens_menu_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="earn_by_subscribe"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard

def profile_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üü° –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data="earn_tokens"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard

def admin_back_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back"))
    return keyboard

def admin_winner_type_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üéÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="winner_standard"),
        InlineKeyboardButton("üì± –†–æ–∑—ã–≥—Ä—ã—à iPhone", callback_data="winner_iphone")
    )
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back"))
    return keyboard

def bot_editor_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç—ã", callback_data="edit_texts"),
        InlineKeyboardButton("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="edit_photos")
    )
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back"))
    return keyboard

def edit_texts_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üè† –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="edit_text_start"),
        InlineKeyboardButton("üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="edit_text_profile"),
        InlineKeyboardButton("üì± –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π", callback_data="edit_text_socials"),
        InlineKeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="edit_text_support"),
        InlineKeyboardButton("üü° –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤", callback_data="edit_text_tokens"),
        InlineKeyboardButton("üéÅ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="edit_text_giveaways"),
        InlineKeyboardButton("üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è iPhone", callback_data="edit_text_iphone"),
        InlineKeyboardButton("üìã –§–æ—Ä–º–∞—Ç –∫–æ–ø–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞", callback_data="edit_text_copyable")
    )
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É", callback_data="bot_editor"))
    return keyboard

def edit_photos_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üè† –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ", callback_data="edit_photo_start"),
        InlineKeyboardButton("üë§ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="edit_photo_profile")
    )
    keyboard.add(
        InlineKeyboardButton("üì± –§–æ—Ç–æ —Å–æ—Ü—Å–µ—Ç–µ–π", callback_data="edit_photo_socials"),
        InlineKeyboardButton("üí¨ –§–æ—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="edit_photo_support")
    )
    keyboard.add(
        InlineKeyboardButton("üëë –§–æ—Ç–æ –∞–¥–º–∏–Ω–∫–∏", callback_data="edit_photo_admin"),
        InlineKeyboardButton("üì± –§–æ—Ç–æ iPhone", callback_data="edit_photo_iphone")
    )
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É", callback_data="bot_editor"))
    return keyboard

def admin_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", callback_data="admin_participants"),
        InlineKeyboardButton("üéÅ –£–∑–Ω–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", callback_data="admin_winner_type")
    )
    keyboard.add(
        InlineKeyboardButton("üì± –£—á–∞—Å—Ç–Ω–∏–∫–∏ iPhone", callback_data="admin_iphone_participants")
    )
    keyboard.add(
        InlineKeyboardButton("üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users"),
        InlineKeyboardButton("üìä –í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (Excel)", callback_data="admin_export_data")
    )
    keyboard.add(
        InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton("‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="bot_editor")
    )
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back"))
    return keyboard

def winner_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîÅ –ï—â–µ —Ä–∞–∑", callback_data="admin_winner"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")
    )
    return keyboard

def support_categories_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    for category, link in SUPPORT_CATEGORIES.items():
        keyboard.add(InlineKeyboardButton(category, url=link))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard

def broadcast_confirmation_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")
    )
    return keyboard

def animate_winner_selection(chat_id, message_id, participants):
    frames = 15
    frame_delay = 0.2
    
    try:
        bot.edit_message_text("üé∞ –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...", chat_id, message_id)
    except:
        pass
    
    for i in range(frames):
        participant = random.choice(participants)
        user_id, username = participant
        username_display = f"@{username}" if username else "–±–µ–∑ username"
        
        text = f"üé∞ –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...\n\n"
        text += f"‚ñ∞{'‚ñ∞' * (i % 5)}{'‚ñ±' * (4 - (i % 5))} {100 * (i + 1) // frames}%\n\n"
        text += f"üë§ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: ID {user_id} ({username_display})"
        
        try:
            bot.edit_message_text(text, chat_id, message_id)
        except:
            break
        
        time.sleep(frame_delay)
    
    return participant

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def safe_edit_message(chat_id, message_id, text, reply_markup=None, parse_mode=None):
    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
        bot.edit_message_text(
            text, 
            chat_id, 
            message_id, 
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except telebot.apihelper.ApiTelegramException as e:
        if "no text in the message" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                bot.delete_message(chat_id, message_id)
            except:
                pass
            bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            raise e
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    update_user_info(user_id, username)
    
    start_text = get_setting('start_message', START_MESSAGE)
    send_photo_message(message.chat.id, 'start', start_text, main_menu())

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    bot.send_message(message.chat.id, "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    user_id = call.from_user.id
    username = call.from_user.username
    
    # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    update_user_info(user_id, username)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if call.data == "support":
        support_text = get_setting('support_message', SUPPORT_MESSAGE)
        edit_photo_message(chat_id, message_id, 'support', support_text, support_categories_keyboard())
    
    elif call.data == "socials":
        keyboard = InlineKeyboardMarkup()
        for name, url in SOCIAL_MEDIA.items():
            keyboard.add(InlineKeyboardButton(name, url=url))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
        
        socials_text = get_setting('socials_message', SOCIALS_MESSAGE)
        edit_photo_message(chat_id, message_id, 'socials', socials_text, keyboard)
    
    elif call.data == "giveaways":
        cursor.execute("SELECT id, name, description, price FROM giveaways")
        giveaways = cursor.fetchall()
        
        if not giveaways:
            safe_edit_message(chat_id, message_id, "üéÅ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ—Ç", back_keyboard())
            return
            
        text = get_setting('giveaways_message', GIVEAWAYS_MESSAGE)
        for giveaway in giveaways:
            giveaway_id, name, description, price = giveaway
            text += f"{name}\n{description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: {price}üü°\n\n"
        
        keyboard = InlineKeyboardMarkup()
        for giveaway in giveaways:
            giveaway_id, name, *_ = giveaway
            keyboard.add(InlineKeyboardButton(name, callback_data=f"giveaway_{giveaway_id}"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
        safe_edit_message(chat_id, message_id, text, keyboard)
    
    elif call.data == "earn_tokens":
        earn_text = get_setting('earn_tokens_message', EARN_TOKENS_MESSAGE)
        keyboard = earn_tokens_menu_keyboard()
        safe_edit_message(chat_id, message_id, earn_text, keyboard)
    
    elif call.data == "earn_by_subscribe":
        cursor.execute("SELECT bonus_received FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        if result and result[0] and not is_admin(user_id):
            safe_edit_message(chat_id, message_id, "üü° –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", back_keyboard())
            return
        
        text = f"üü° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ {BONUS_AMOUNT} —Ç–æ–∫–µ–Ω–æ–≤!\n\n–ö–∞–Ω–∞–ª: {CHANNEL_LINK}"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK))
        keyboard.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="earn_tokens"))
        safe_edit_message(chat_id, message_id, text, keyboard)
    
    elif call.data == "check_subscription":
        if not is_admin(user_id):
            cursor.execute("SELECT bonus_received FROM users WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            if result and result[0]:
                bot.answer_callback_query(call.id, "‚õî –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å!")
                return
        
        if is_user_subscribed(user_id):
            bonus = BONUS_AMOUNT * 10 if is_admin(user_id) else BONUS_AMOUNT
            cursor.execute("UPDATE users SET tokens = tokens + ?, bonus_received = 1 WHERE user_id = ?", (bonus, user_id))
            conn.commit()
            
            cursor.execute("SELECT tokens FROM users WHERE user_id = ?", (user_id,))
            new_balance = cursor.fetchone()[0]
            
            text = SUCCESS_BONUS.format(bonus=bonus, new_balance=new_balance)
            if is_admin(user_id):
                text += "\n\nüëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π –±–æ–Ω—É—Å x10!"
            safe_edit_message(chat_id, message_id, text, back_keyboard())
        else:
            bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")
            safe_edit_message(chat_id, message_id, NOT_SUBSCRIBED_MESSAGE.format(CHANNEL_LINK=CHANNEL_LINK), earn_tokens_menu_keyboard())
    
    elif call.data.startswith("giveaway_"):
        giveaway_id = int(call.data.split("_")[1])
        cursor.execute("SELECT name, description, price FROM giveaways WHERE id = ?", (giveaway_id,))
        giveaway = cursor.fetchone()
        
        if not giveaway:
            bot.answer_callback_query(call.id, "‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        name, description, price = giveaway
        text = GIVEAWAY_DETAILS_MESSAGE.format(name=name, description=description, price=price)
        safe_edit_message(chat_id, message_id, text, giveaway_keyboard(giveaway_id))
    
    elif call.data.startswith("participate_"):
        giveaway_id = int(call.data.split("_")[1])
        
        if is_admin(user_id):
            bot.answer_callback_query(call.id, ADMIN_CANNOT_PARTICIPATE)
            return
            
        cursor.execute("SELECT price FROM giveaways WHERE id = ?", (giveaway_id,))
        result = cursor.fetchone()
        
        if not result:
            bot.answer_callback_query(call.id, "‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        price = result[0]
        cursor.execute("SELECT tokens FROM users WHERE user_id = ?", (user_id,))
        tokens_result = cursor.fetchone()
        
        if not tokens_result:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        tokens = tokens_result[0]
        
        if tokens < price:
            bot.answer_callback_query(call.id, f"‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –ù—É–∂–Ω–æ {price}üü°")
            return
        
        new_balance = tokens - price
        cursor.execute("UPDATE users SET tokens = ? WHERE user_id = ?", (new_balance, user_id))
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute(
            "INSERT INTO giveaway_participants (user_id, giveaway_id, participation_date) VALUES (?, ?, ?)",
            (user_id, giveaway_id, now)
        )
        conn.commit()
        
        bot.answer_callback_query(call.id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–ø–∏—Å–∞–Ω–Ω–æ {price}üü°")
        safe_edit_message(
            chat_id, message_id,
            SUCCESS_PARTICIPATION.format(price=price, new_balance=new_balance),
            back_keyboard()
        )
    
    elif call.data == "profile":
        cursor.execute("SELECT tokens, username, bonus_received FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        
        if result:
            tokens, db_username, bonus_received = result
            username_display = f"@{db_username}" if db_username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            
            if is_admin(user_id):
                admin_status = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                bonus_status = "‚ôæÔ∏è –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
            else:
                admin_status = ""
                bonus_status = "‚úÖ –ü–æ–ª—É—á–µ–Ω" if bonus_received else "‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω"
            
            profile_text = get_setting('profile_message', PROFILE_MESSAGE)
            text = profile_text.format(
                user_id=user_id,
                username=username_display,
                tokens=tokens,
                bonus_status=bonus_status,
                admin_status=admin_status
            )
        else:
            text = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
        
        edit_photo_message(chat_id, message_id, 'profile', text, profile_keyboard())
    
    elif call.data == "back":
        safe_edit_message(chat_id, message_id, START_MESSAGE, main_menu())
    
    # –†–æ–∑—ã–≥—Ä—ã—à iPhone –∑–∞ –æ—Ç–∑—ã–≤
    elif call.data == "iphone_giveaway":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT unique_id FROM iphone_participants WHERE user_id = ?", (user_id,))
        existing = cursor.fetchone()
        
        iphone_instruction = get_setting('iphone_instruction', IPHONE_GIVEAWAY_INSTRUCTION)
        copyable_format = get_setting('copyable_text', COPYABLE_TEXT)
        
        if existing:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            unique_id = existing[0]
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å Markdown
            copy_text = copyable_format.format(text=f"–£—á–∞—Å—Ç–≤—É—é –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ iPhone! ID: {unique_id}")
            text = iphone_instruction.format(unique_id=unique_id, copy_text=copy_text)
            text += "\n\n‚úÖ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!"
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            unique_id = f"IP{random.randint(10000, 99999)}{random.randint(100, 999)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
            while True:
                cursor.execute("SELECT id FROM iphone_participants WHERE unique_id = ?", (unique_id,))
                if not cursor.fetchone():
                    break
                unique_id = f"IP{random.randint(10000, 99999)}{random.randint(100, 999)}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute(
                "INSERT INTO iphone_participants (user_id, unique_id, participation_date, giveaway_id) VALUES (?, ?, ?, ?)",
                (user_id, unique_id, now, 1)
            )
            conn.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å Markdown
            copy_text = copyable_format.format(text=f"–£—á–∞—Å—Ç–≤—É—é –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ iPhone! ID: {unique_id}")
            text = iphone_instruction.format(unique_id=unique_id, copy_text=copy_text)
            text += "\n\nüéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        edit_photo_message(chat_id, message_id, 'iphone', text, back_keyboard(), parse_mode="Markdown")
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    elif call.data == "admin_participants":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        cursor.execute('''
        SELECT u.user_id, u.username, g.name, gp.participation_date 
        FROM giveaway_participants gp
        JOIN users u ON gp.user_id = u.user_id
        JOIN giveaways g ON gp.giveaway_id = g.id
        ''')
        participants = cursor.fetchall()
        
        if not participants:
            safe_edit_message(chat_id, message_id, "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø–æ–∫–∞ –Ω–µ—Ç", admin_back_keyboard())
            return
            
        response = "üé´ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:\n\n"
        for idx, participant in enumerate(participants, 1):
            user_id, username, giveaway_name, date = participant
            username_display = f"@{username}" if username else "–±–µ–∑ username"
            response += f"{idx}. ID {user_id} ({username_display})\n"
            response += f"   –†–æ–∑—ã–≥—Ä—ã—à: {giveaway_name}\n"
            response += f"   –î–∞—Ç–∞: {date}\n\n"
        
        safe_edit_message(chat_id, message_id, response, admin_back_keyboard())
    
    elif call.data == "admin_winner_type":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        safe_edit_message(chat_id, message_id, "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–∑—ã–≥—Ä—ã—à–∞:", admin_winner_type_keyboard())
    
    elif call.data == "winner_standard":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        cursor.execute('''
        SELECT u.user_id, u.username 
        FROM giveaway_participants gp
        JOIN users u ON gp.user_id = u.user_id
        WHERE u.user_id NOT IN ({})
        '''.format(','.join('?' * len(ADMINS))), ADMINS)
        participants = cursor.fetchall()
        
        if not participants:
            safe_edit_message(chat_id, message_id, "‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", admin_back_keyboard())
            return
        
        last_shown = animate_winner_selection(chat_id, message_id, participants)
        
        winner = random.choice(participants)
        winner_id, winner_username = winner
        username_display = f"@{winner_username}" if winner_username else "–±–µ–∑ username"
        
        response = "üéâüéä –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –°–¢–ê–ù–î–ê–†–¢–ù–û–ì–û –†–û–ó–´–ì–†–´–®–ê üéäüéâ\n\n"
        response += "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        response += "‚îÉ  üèÜ –í–´–ò–ì–†–ê–õ üèÜ  ‚îÉ\n"
        response += "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
        response += f"üÜî ID: {winner_id}\n"
        response += f"üë§ Username: {username_display}"
        
        if winner_username:
            response += f"\n\n‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å: @{winner_username}"
        
        safe_edit_message(chat_id, message_id, response, winner_keyboard())
    
    elif call.data == "winner_iphone":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        cursor.execute('''
        SELECT ip.user_id, u.username, ip.unique_id
        FROM iphone_participants ip
        JOIN users u ON ip.user_id = u.user_id
        WHERE ip.user_id NOT IN ({})
        '''.format(','.join('?' * len(ADMINS))), ADMINS)
        participants = cursor.fetchall()
        
        if not participants:
            safe_edit_message(chat_id, message_id, "‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ iPhone", admin_back_keyboard())
            return
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è iPhone —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        frames = 15
        frame_delay = 0.2
        
        try:
            bot.edit_message_text("üì± –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è iPhone...", chat_id, message_id)
        except:
            pass
        
        for i in range(frames):
            participant = random.choice(participants)
            participant_user_id, username, unique_id = participant
            username_display = f"@{username}" if username else "–±–µ–∑ username"
            
            text = f"üì± –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è iPhone...\n\n"
            text += f"‚ñ∞{'‚ñ∞' * (i % 5)}{'‚ñ±' * (4 - (i % 5))} {100 * (i + 1) // frames}%\n\n"
            text += f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {unique_id}\n"
            text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {participant_user_id} ({username_display})"
            
            try:
                bot.edit_message_text(text, chat_id, message_id)
            except:
                break
            
            time.sleep(frame_delay)
        
        winner = random.choice(participants)
        winner_user_id, winner_username, winner_unique_id = winner
        username_display = f"@{winner_username}" if winner_username else "–±–µ–∑ username"
        
        response = "üì±üéâ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –†–û–ó–´–ì–†–´–®–ê IPHONE üéâüì±\n\n"
        response += "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        response += "‚îÉ üì± IPHONE! üì± ‚îÉ\n"
        response += "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
        response += f"üè∑Ô∏è ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {winner_unique_id}\n"
        response += f"üÜî User ID: {winner_user_id}\n"
        response += f"üë§ Username: {username_display}"
        
        if winner_username:
            response += f"\n\n‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å: @{winner_username}"
        
        safe_edit_message(chat_id, message_id, response, winner_keyboard())
    
    elif call.data == "admin_back":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        safe_edit_message(chat_id, message_id, "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", admin_keyboard())
    
    # –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ iPhone
    elif call.data == "admin_iphone_participants":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        cursor.execute('''
        SELECT ip.user_id, u.username, ip.unique_id, ip.participation_date 
        FROM iphone_participants ip
        JOIN users u ON ip.user_id = u.user_id
        ORDER BY ip.participation_date DESC
        ''')
        participants = cursor.fetchall()
        
        if not participants:
            safe_edit_message(chat_id, message_id, "üì± –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ iPhone –ø–æ–∫–∞ –Ω–µ—Ç", admin_back_keyboard())
            return
            
        response = "üì± –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ iPhone:\n\n"
        for idx, participant in enumerate(participants, 1):
            participant_user_id, username, unique_id, date = participant
            username_display = f"@{username}" if username else "–±–µ–∑ username"
            response += f"{idx}. ID: {unique_id}\n"
            response += f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {participant_user_id} ({username_display})\n"
            response += f"   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date}\n\n"
        
        response += f"üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}"
        safe_edit_message(chat_id, message_id, response, admin_back_keyboard())
    
    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    elif call.data == "admin_broadcast":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        admin_states[user_id] = {"state": "waiting_broadcast"}
        safe_edit_message(
            chat_id, message_id,
            "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
            "‚Ä¢ –ò–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (—Ç–µ–∫—Å—Ç –ø–æ–¥ —Ñ–æ—Ç–æ)\n"
            "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ"
        )
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    elif call.data == "admin_all_users":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        cursor.execute("SELECT user_id, username, tokens, bonus_received, created_at, last_seen FROM users ORDER BY user_id DESC")
        users = cursor.fetchall()
        
        if not users:
            safe_edit_message(chat_id, message_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç", admin_back_keyboard())
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        response = "üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:\n\n"
        for user in users:
            user_id, username, tokens, bonus_received, created_at, last_seen = user
            username_display = f"@{username}" if username else "–±–µ–∑ username"
            bonus_status = "‚úÖ" if bonus_received else "‚ùå"
            response += f"üÜî {user_id}\nüë§ {username_display}\nüü° –¢–æ–∫–µ–Ω—ã: {tokens}\nüéÅ –ë–æ–Ω—É—Å: {bonus_status}\nüìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {created_at}\nüëÄ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {last_seen}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–Ω–æ–≥–æ
        if len(response) > 3000:
            parts = [response[i:i+3000] for i in range(0, len(response), 3000)]
            for part in parts:
                bot.send_message(chat_id, part)
            safe_edit_message(chat_id, message_id, f"üë§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", admin_back_keyboard())
        else:
            safe_edit_message(chat_id, message_id, response, admin_back_keyboard())
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel
    elif call.data == "admin_export_data":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        bot.answer_callback_query(call.id, "‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
        
        try:
            filename = export_users_to_excel()
            if filename:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if os.path.exists(filename) and os.path.getsize(filename) > 0:
                    with open(filename, 'rb') as file:
                        bot.send_document(
                            chat_id=chat_id,
                            document=file,
                            caption="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                            reply_markup=admin_back_keyboard()
                        )
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(filename)
                else:
                    logger.error(f"–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç: {filename}")
                    bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω", reply_markup=admin_back_keyboard())
            else:
                logger.error("–§—É–Ω–∫—Ü–∏—è export_users_to_excel –≤–µ—Ä–Ω—É–ª–∞ None")
                bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞", reply_markup=admin_back_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", exc_info=True)
            bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}", reply_markup=admin_back_keyboard())
    
    elif call.data == "confirm_broadcast":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        state_data = admin_states.get(user_id, {})
        if state_data.get("state") != "confirmation":
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        text = state_data.get("text", "")
        photo_id = state_data.get("photo_id", None)
        
        user_ids = get_all_users_except_admins()
        total = len(user_ids)
        success = 0
        errors = 0
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            if photo_id:
                bot.send_photo(chat_id, photo=photo_id, caption="‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π\n\n" + (text[:900] if text else ""))
            else:
                bot.send_message(chat_id, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π:\n\n" + text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        for uid in user_ids:
            try:
                if photo_id:
                    bot.send_photo(uid, photo=photo_id, caption=text[:1024] if text else None)
                else:
                    bot.send_message(uid, text)
                success += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {str(e)}")
                errors += 1
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if user_id in admin_states:
            del admin_states[user_id]
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        safe_edit_message(
            chat_id, message_id,
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {errors}"
        )
    
    elif call.data == "cancel_broadcast":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in admin_states:
            del admin_states[user_id]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        safe_edit_message(
            chat_id, message_id,
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            admin_keyboard()
        )
    
    # –†–µ–¥–∞–∫—Ç–æ—Ä –±–æ—Ç–∞
    elif call.data == "bot_editor":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        edit_photo_message(chat_id, message_id, 'admin', "‚öôÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –±–æ—Ç–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", bot_editor_keyboard())
    
    elif call.data == "edit_texts":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        safe_edit_message(chat_id, message_id, "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", edit_texts_keyboard())
    
    elif call.data == "edit_photos":
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
            
        safe_edit_message(chat_id, message_id, "üì∏ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", edit_photos_keyboard())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤
    elif call.data.startswith("edit_text_"):
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        text_type = call.data.replace("edit_text_", "")
        text_names = {
            "start": "—Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "profile": "—Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", 
            "socials": "—Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ü—Å–µ—Ç–µ–π",
            "support": "—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            "tokens": "—Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö",
            "giveaways": "—Å–æ–æ–±—â–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π",
            "iphone": "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ iPhone",
            "copyable": "—Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–ø–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"
        }
        
        admin_states[user_id] = {"state": "editing_text", "text_type": text_type}
        
        current_text = get_setting(f'{text_type}_message', "")
        if text_type == "iphone":
            current_text = get_setting('iphone_instruction', "")
        elif text_type == "copyable":
            current_text = get_setting('copyable_text', "")
        
        safe_edit_message(
            chat_id, message_id,
            f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {text_names.get(text_type, text_type)}\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{current_text[:500]}...\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
    elif call.data.startswith("edit_photo_"):
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        photo_type = call.data.replace("edit_photo_", "")
        photo_names = {
            "start": "—Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞",
            "profile": "–ø—Ä–æ—Ñ–∏–ª—è",
            "socials": "—Å–æ—Ü—Å–µ—Ç–µ–π", 
            "support": "–ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            "admin": "–∞–¥–º–∏–Ω–∫–∏",
            "iphone": "iPhone —Ä–æ–∑—ã–≥—Ä—ã—à–∞"
        }
        
        admin_states[user_id] = {"state": "editing_photo", "photo_type": photo_type}
        
        safe_edit_message(
            chat_id, message_id,
            f"üì∏ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ {photo_names.get(photo_type, photo_type)}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç.\n"
            f"–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG/PNG –∏ –≤–µ—Å–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 20MB."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ä–∞—Å—Å—ã–ª–∫–∞)
@bot.message_handler(content_types=['text', 'photo'], 
                     func=lambda message: is_admin(message.from_user.id) and 
                     admin_states.get(message.from_user.id, {}).get("state") == "waiting_broadcast")
def handle_broadcast_input(message):
    user_id = message.from_user.id
    state_data = admin_states.get(user_id, {})
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if message.photo:
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        caption = message.caption if message.caption else ""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        state_data.update({
            "state": "confirmation",
            "text": caption,
            "photo_id": file_id
        })
        admin_states[user_id] = state_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        preview = "üì∏ *–§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:*\n"
        if caption:
            preview += f"{caption}\n"
        preview += f"\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(get_all_users_except_admins())}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.send_photo(
            message.chat.id, 
            photo=file_id, 
            caption=preview,
            reply_markup=broadcast_confirmation_keyboard(),
            parse_mode="Markdown"
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    elif message.text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        state_data.update({
            "state": "confirmation",
            "text": message.text,
            "photo_id": None
        })
        admin_states[user_id] = state_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        preview = f"‚úâÔ∏è *–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:*\n{message.text}\n\n"
        preview += f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(get_all_users_except_admins())}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.reply_to(
            message,
            preview,
            reply_markup=broadcast_confirmation_keyboard(),
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤
@bot.message_handler(content_types=['text'], 
                     func=lambda message: is_admin(message.from_user.id) and 
                     admin_states.get(message.from_user.id, {}).get("state") == "editing_text")
def handle_text_editing(message):
    user_id = message.from_user.id
    state_data = admin_states.get(user_id, {})
    text_type = state_data.get("text_type")
    
    if not text_type:
        return
    
    new_text = message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–ø–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if text_type == "copyable":
        setting_name = 'copyable_text'
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        if "{text}" not in new_text:
            bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {text}!")
            return
    else:
        setting_name = f'{text_type}_message'
        if text_type == "iphone":
            setting_name = 'iphone_instruction'
    
    if update_setting(setting_name, new_text):
        bot.reply_to(message, f"‚úÖ –¢–µ–∫—Å—Ç {text_type} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=edit_texts_keyboard())
    else:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ {text_type}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in admin_states:
        del admin_states[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'], 
                     func=lambda message: is_admin(message.from_user.id) and 
                     admin_states.get(message.from_user.id, {}).get("state") == "editing_photo")
def handle_photo_editing(message):
    user_id = message.from_user.id
    state_data = admin_states.get(user_id, {})
    photo_type = state_data.get("photo_type")
    
    if not photo_type:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = bot.get_file(message.photo[-1].file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_extension = file_info.file_path.split('.')[-1]
        new_filename = f"{photo_type}.{file_extension}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(new_filename, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if update_setting(f'photo_{photo_type}', new_filename):
            bot.reply_to(message, f"‚úÖ –§–æ—Ç–æ {photo_type} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=edit_photos_keyboard())
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ {photo_type}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ {photo_type}: {str(e)}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in admin_states:
        del admin_states[user_id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMINS}")
    bot.infinity_polling()
